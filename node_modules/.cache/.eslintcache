[{"/Users/ngr/Desktop/leveling/src/index.tsx":"1","/Users/ngr/Desktop/leveling/src/App.tsx":"2","/Users/ngr/Desktop/leveling/src/data/acts.ts":"3"},{"size":220,"mtime":1643997842103,"results":"4","hashOfConfig":"5"},{"size":5882,"mtime":1644045965278,"results":"6","hashOfConfig":"5"},{"size":26733,"mtime":1644045800343,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tvwlbm",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ngr/Desktop/leveling/src/index.tsx",[],[],"/Users/ngr/Desktop/leveling/src/App.tsx",["18"],[],"import { Tab, Tabs } from '@mui/material'\nimport { ReactNode, SyntheticEvent, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport StepContent from '@mui/material/StepContent';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\n\nimport { data } from './data/acts'\n\ntype Steps = {\n  label: string;\n  description: string;\n}\n\ntype TabPanelProps = {\n  children: ReactNode\n  index: number\n  value: number\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst dataToSteps = (data: string[]) => {\n  return data.reduce((acc, val, i) => {\n    return [...acc, { label: '', description: val}]\n  }, [] as Steps[])\n}\n\nexport default function App() {\n  const [value, setValue] = useState<number>(0);\n\n  const handleChange = (event: SyntheticEvent<Element, Event>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" centered>\n          <Tab label=\"Act I\" {...a11yProps(0)} sx={{color: 'white'}}/>\n          <Tab label=\"Act II\" {...a11yProps(1)} sx={{color: 'white'}}/>\n          <Tab label=\"Act III\" {...a11yProps(2)} sx={{color: 'white'}}/>\n          <Tab label=\"Act IV\" {...a11yProps(3)} sx={{color: 'white'}}/>\n          <Tab label=\"Act V\" {...a11yProps(4)} sx={{color: 'white'}}/>\n          <Tab label=\"Act VI\" {...a11yProps(5)} sx={{color: 'white'}}/>\n          <Tab label=\"Act VII\" {...a11yProps(6)} sx={{color: 'white'}}/>\n          <Tab label=\"Act VIII\" {...a11yProps(7)} sx={{color: 'white'}}/>\n          <Tab label=\"Act IX\" {...a11yProps(8)} sx={{color: 'white'}}/>\n          <Tab label=\"Act X\" {...a11yProps(9)} sx={{color: 'white'}}/>\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={4}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={5}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={6}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={7}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={8}>\n        <Act n={value}/>\n      </TabPanel>\n      <TabPanel value={value} index={9}>\n        <Act n={value}/>\n      </TabPanel>\n    </Box>\n  )\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography component={'span'}>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst Act = ({n}: { n: number})  => {\n  const [activeStep, setActiveStep] = useState(0);\n  const steps = dataToSteps(data[n])\n  const ref = useRef<HTMLDivElement>()\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n\n  const handleKeyPress = useCallback(\n    (event: KeyboardEvent) => {\n      ref.current?.scrollIntoView({behavior: 'smooth', block: 'center'})\n        if (event.key === \" \" || event.key === 'Enter') {\n          event.preventDefault()\n          handleNext();\n        }\n        if (event.key === \"Backspace\") {\n          handleBack();\n        }\n        if (event.key === \"r\") {\n          handleReset();\n          ref.current?.scrollIntoView({behavior: 'smooth'})\n        }\n\n    },\n    [handleNext]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [handleKeyPress]);\n\n  return (\n    <Box sx={{  maxWidth: '900px', margin: '0 auto', color: 'white', backgroundColor: '#333', maxHeight: '100vh', overflowY: 'auto', pr: 2}}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\" sx={{ ml: 2}}>\n        {steps.map((step, index) => (\n          <Step key={step.label || index} ref={index === activeStep ? ref : null} >\n            <StepLabel StepIconProps={{sx: { color: '#33A'}}}>\n              {step.label}\n            </StepLabel>\n            <StepContent>\n              <Card elevation={3} sx={{backgroundColor: '#444', padding: '16px', color: 'white'}}>\n                <Typography>{step.description}</Typography>\n              </Card>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    onClick={handleBack}\n                    sx={{ mt: 2, mr: 1, color: 'white' }}\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={handleNext}\n                    sx={{ mt: 2, mr: 1, color: 'white' }}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Next'}\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </Box>\n  );\n}\n","/Users/ngr/Desktop/leveling/src/data/acts.ts",[],[],{"ruleId":"19","severity":1,"message":"20","line":121,"column":9,"nodeType":"21","endLine":123,"endColumn":4,"suggestions":"22"},"react-hooks/exhaustive-deps","The 'handleNext' function makes the dependencies of useCallback Hook (at line 148) change on every render. To fix this, wrap the definition of 'handleNext' in its own useCallback() Hook.","VariableDeclarator",["23"],{"desc":"24","fix":"25"},"Wrap the definition of 'handleNext' in its own useCallback() Hook.",{"range":"26","text":"27"},[3622,3692],"useCallback(() => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  })"]