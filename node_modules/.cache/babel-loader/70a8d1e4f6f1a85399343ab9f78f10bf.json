{"ast":null,"code":"var _jsxFileName = \"/Users/ngr/Desktop/leveling/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport StepContent from '@mui/material/StepContent';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\nimport { a1Data } from './data/a1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst dataToSteps = data => {\n  return data.reduce((acc, val, i) => {\n    return [...acc, {\n      label: '',\n      description: val\n    }];\n  }, []);\n};\n\nexport default function App() {\n  _s();\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = dataToSteps(a1Data);\n  const ref = useRef();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const handleKeyPress = useCallback(event => {\n    var _ref$current;\n\n    (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n\n    if (event.key === \" \" || event.key === 'Enter') {\n      event.preventDefault();\n      handleNext();\n    }\n\n    if (event.key === \"Backspace\") {\n      handleBack();\n    }\n\n    if (event.key === \"r\") {\n      var _ref$current2;\n\n      handleReset();\n      (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [handleNext]);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [handleKeyPress]); //@ts-ignore\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      maxWidth: '50%',\n      margin: '0 auto',\n      color: 'white',\n      backgroundColor: '#333',\n      maxHeight: '100vh',\n      overflowY: 'auto'\n    },\n    children: /*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      sx: {\n        ml: 2\n      },\n      children: steps.map((step, index) => /*#__PURE__*/_jsxDEV(Step, {\n        ref: index === activeStep ? ref : null,\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          StepIconProps: {\n            sx: {\n              color: 'darkred'\n            }\n          },\n          children: step.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: [/*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              children: step.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: handleNext,\n                sx: {\n                  mt: 1,\n                  mr: 1,\n                  color: 'white'\n                },\n                children: index === steps.length - 1 ? 'Finish' : 'Next'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleBack,\n                sx: {\n                  mt: 1,\n                  mr: 1,\n                  color: 'white'\n                },\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, step.label || index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6601wZ2ulDlfNkuFpZUApOOMf3w=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ngr/Desktop/leveling/src/App.tsx"],"names":["useCallback","useEffect","useRef","React","Box","Stepper","Step","StepLabel","StepContent","Button","Card","Typography","a1Data","dataToSteps","data","reduce","acc","val","i","label","description","App","activeStep","setActiveStep","useState","steps","ref","handleNext","prevActiveStep","handleBack","handleReset","handleKeyPress","event","current","scrollIntoView","behavior","key","preventDefault","window","addEventListener","removeEventListener","maxWidth","margin","color","backgroundColor","maxHeight","overflowY","ml","map","step","index","sx","mb","mt","mr","length"],"mappings":"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","sourcesContent":["import { MutableRefObject, useCallback, useEffect, useRef } from 'react'\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport StepContent from '@mui/material/StepContent';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport Typography from '@mui/material/Typography';\n\nimport { a1Data } from './data/a1'\n\ntype Steps = {\n  label: string;\n  description: string;\n}\n\nconst dataToSteps = (data: string[]) => {\n  return data.reduce((acc, val, i) => {\n    return [...acc, { label: '', description: val}]\n  }, [] as Steps[])\n}\n\nexport default function App() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = dataToSteps(a1Data)\n  const ref = useRef<HTMLDivElement>()\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n\n  const handleKeyPress = useCallback(\n    (event: KeyboardEvent) => {\n      ref.current?.scrollIntoView({behavior: 'smooth'})\n        if (event.key === \" \" || event.key === 'Enter') {\n          event.preventDefault()\n          handleNext();\n        }\n        if (event.key === \"Backspace\") {\n          handleBack();\n        }\n        if (event.key === \"r\") {\n          handleReset();\n          ref.current?.scrollIntoView({behavior: 'smooth'})\n        }\n\n    },\n    [handleNext]\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [handleKeyPress]);\n\n  //@ts-ignore\n  return (\n    <Box sx={{  maxWidth: '50%', margin: '0 auto', color: 'white', backgroundColor: '#333', maxHeight: '100vh', overflowY: 'auto' }}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\" sx={{ ml: 2}}>\n        {steps.map((step, index) => (\n          <Step key={step.label || index} ref={index === activeStep ? ref : null} >\n            <StepLabel StepIconProps={{sx: { color: 'darkred'}}}>\n              {step.label}\n            </StepLabel>\n            <StepContent>\n              <Card>\n                <Typography>{step.description}</Typography>\n\n              </Card>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 1, mr: 1, color: 'white' }}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Next'}\n                  </Button>\n                  <Button\n                    onClick={handleBack}\n                    sx={{ mt: 1, mr: 1, color: 'white' }}\n                  >\n                    Back\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}